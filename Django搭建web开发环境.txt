# PythonAnywhere操作（新环境）
    $ cd my-first-blog      # 切换到虚拟环境目录
    $ source myvenv/bin/activate
    (myvenv)$ git pull      # 把github代码下载下来
    [...]
    (myvenv)$ python manage.py collectstatic
    [...]
    最后，跳到 Web 标签页 并点击 重新载入

# 创建Django项目
    1. 创建项目：在命令行下输入：django-admin startproject (项目名)        （cmd命令先进入需要创建目录的路径）
    2. 导入项目：打开Pycharm，open，选择刚才创建的项目
    3. 创建应用：在命令行下输入：python manage.py startapp (应用名)      （cmd命令下先进入项目名所在的目录）
    4. 查看目录：应该有项目和应用2个文件夹
    5. 启动服务：在命令行下输入：python manage.py runserver     （命令下先进入项目名所在的目录）
    6. 服务运行起来之后，可以在浏览器输入默认的访问地址127.0.0.1:8000

# 在Django命令行里创建文章
    一、打开你本地的终端(不是在Python解析器里面) 然后输入这个命令:
        python manage.py shell
        效果应该像这样：
            (InteractiveConsole)
            >>>
    二、首先导入它
        >>> from blog.models import Post
    三、显示所有的帖子：
        >>> Post.objects.all()
            <QuerySet [<Post: my post title>, <Post: another post title>]>
    四、创建对象
        1、首先导入用户模型：
            >>> from django.contrib.auth.models import User
        2、我们在数据库中有哪些用户？试试这个：
            >>> User.objects.all()
                <QuerySet [<User: ola>]>
        3、这是一个我们之前创建的超级用户！让我们现在获取一个用户实例：
            me = User.objects.get(username='自己的用户名')
        4、创建我们的文章:
            >>> Post.objects.create(author=me, title='文章名', text='内容')
        5、要检查是否有效吗？
            >>> Post.objects.all()
                <QuerySet [<Post: my post title>, <Post: another post title>, <Post: Sample title>]>
            就是这样，又一个文章在列表里面！
    五、筛选对象
        QuerySets的很大一部分功能是对它们进行筛选。譬如，我们想要发现所有都由用户ola编写的文章。
        我们将使用 filter ，而不是 all 在 Post.objects.all() 。 我们需要在括号中申明哪些条件，以在我们的 queryset 结果集中包含一篇博客文章。
        在我们的情况是 author ，它等于 me 。 把它写在 Django 的方式是： author = me 。
        现在我们的代码段如下所示：
            >>> Post.objects.filter(author=me)
                <QuerySet [<Post: Sample title>, <Post: Post number 2>, <Post: My 3rd post!>, <Post: 4th title of post>]>
        或者，也许我们想看到包含在 title 字段标题的所有帖子吗？
            >>> Post.objects.filter(title__contains='title')
                <QuerySet [<Post: Sample title>, <Post: 4th title of post>]>
        # 注：在 title 与 contains 之间有两个下划线字符 ( _ )。
        Django 的 ORM 使用此语法来分隔字段名称（"title"）和操作或筛选器 （"contains"）。
        如果您只使用一个下划线，您将收到类似"FieldError： 无法解析关键字 title_contains"的错误。

        # 你也可以获取一个所有已发布文章的列表。我们通过筛选所有含 published_date 为过去时间的文章来实现这个目的：
            >>> from django.utils import timezone
            >>> Post.objects.filter(published_date__lte=timezone.now())
                []
    六、发布文章
        # 不幸的是，通过Python终端添加的文章还没发布。我们可以改变它！首先获取一个我们想要发布的文章实例：
            >>> post = Post.objects.get(title="Sample title")
        然后将它与我们 publish 的方法一起发布 ！
            >>> post.publish()
        现在再一次尝试获取已发布的文章（按向上箭头按钮三次，然后按回车）:
            >>> Post.objects.filter(published_date__lte=timezone.now())
                <QuerySet [<Post: Sample title>]>

    六、对象排序
        Queryset 还允许您排序结果集对象的列表。让我们试着让它们按 created_date（按日期） 字段排序：
            >>> Post.objects.order_by('created_date')
                <QuerySet [<Post: Sample title>, <Post: Post number 2>, <Post: My 3rd post!>, <Post: 4th title of post>]>
            我们也可以在开头添加 - 来反向排序：
            >>> Post.objects.order_by('-created_date')
                <QuerySet [<Post: 4th title of post>,  <Post: My 3rd post!>, <Post: Post number 2>, <Post: Sample title>]>

    七、链式 QuerySets
        你可以通过 链式调用 连续组合QuerySets
            >>> Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
        这真是强而有力，而且可以让你写较复杂的的查询
        酷 ！现在，你准备下一个部分 ！若要关闭shell程序，请键入这：
            >>> exit()
